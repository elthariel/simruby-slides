.ft-section
  .ft-page
    %h1 Ruby features

    %ul
      %li.ft-fragment
        Le langage
        %ul
          %li.ft-fragment Tout est objet.
          %li.ft-fragment.shy Je veux dire ... VRAIMENT TOUT !
          %li.ft-fragment Traits fonctionnels
          %li.ft-fragment.shy Introspection / Reflection
          %li.ft-fragment MetaProgramming
      %li.ft-fragment
        La communaute
        %ul
          %li.ft-fragment MINSWAN: Matz Is Nice So We Are Nice
          %li.ft-fragment OpenSource: des tas de gemmes.
          %li.ft-fragment.shy Je veux dire BEAUCOUP, pour TOUT.
          %li.ft-fragment DRY : Don't Repeat Yourself.
          %li.ft-fragment.shy NEVER

  .ft-page
    %h1 Les bases

    %pre
      %code.ruby.ft-fragment
        a = "test"           # Useless comment
    %pre
      %code.ruby.ft-fragment
        b = 4                # 4.2 for Float
    %pre
      %code.ruby.ft-fragment
        c = true             # or 'false'
    %pre
      %code.ruby.ft-fragment
        d = nil              # = no value, also false
    %pre
      %code.ruby.ft-fragment
        e = [1, 2, 3, 4, 5]  # an array
    %pre
      %code.ruby.ft-fragment
        :preserve
          # A Hash, associative array, dictionnary, etc.
          f = {'akey' => 'and a value', 23 => "could be a key as well"}
    %pre
      %code.ruby.ft-fragment
        CONSTANT = 'starts with an uppercase letter'

  .ft-page
    %pre
      %code.ruby
        :preserve
          def method_name(param)
            do_somethig_with_param param
          end

    %pre.ft-fragment
      %code.ruby
        :preserve
          def method_name(param, another_param = 'default value')
            do_somethig_with_param param
            do_somethig_with_param(another_param) # () are 'optional'
          end

    %pre.ft-fragment
      %code.ruby
        :preserve
          def example_with_return
            return true
          end

          example_with_return and false

    %pre.ft-fragment
      %code.ruby
        :preserve
          def example_without_return
            # Same as above, the last computed value is returned
            true
          end

  .ft-page
    %h1 Structure conditionnels

    %pre.ft-fragment
      %code.ruby
        :preserve
          if something
            do_1
          elsif smth_else # <- pay attention
            do_2
          else
            do_3
          end

    %pre.ft-fragment
      %code.ruby
        :preserve
          do_1 if something

    %pre.ft-fragment
      %code.ruby
        :preserve
          do_1 if not something
          do_1 unless something # Same as above

    %pre.ft-fragment
      %code.ruby
        :preserve
          variable = true if not variable
          variable = true unless variable # Same as above
          variable ||= true               # Still the same

  .ft-page
    %pre
      %code.ruby
        :preserve
          while something_is_true
            do_1
            do_2
          end

    %h3 Les autres je ne me les rappelle jamais, car elles ne servent a rien grace aux ...

  .ft-page
    %h1 Blocks et iterateurs
    %h2 Block = 'genre de' fonction anonyme

    %pre.ft-fragment
      %code.ruby
        :preserve
          # Exemple
          array = [1, 2, 3, 'choucroute']
          array.each do |item|
            do_smth_cool_with item
            puts item
          end
    %pre.ft-fragment
      %code.ruby
        :preserve
          # 1
          # 2
          # 3
          # choucroute

    %pre.ft-fragment
      %code.ruby
        :preserve
          # Version courte
          array.each { |element| puts element }.reverse

